// -*- C++ -*- generated by wxGlade 0.3.5.1 on Sat Jan 15 17:29:02 2005

#include "xtnDialogDiffDual.h"
#include "xtnApp.h"
#include <wx/filename.h>
#include <wx/gbsizer.h>


xtnDialogDiffDual::xtnDialogDiffDual(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: xtnDialogDiffDual::xtnDialogDiffDual
    //szOptions_staticbox = new wxStaticBox(this, -1, _("Diff Options"));
    lbTitle = new wxStaticText(this, -1, _("xmlDiff two files"));
    lbWith = new wxStaticText(this, -1, _("Before"));
    txWith = new wxTextCtrl(this, -1, wxT(""));
    btBrowseFile = new wxButton(this, BT_BROWSE_WITH, _("..."));
    lbAfter = new wxStaticText(this, -1, _("After"));
    txAfter = new wxTextCtrl(this, -1, wxT(""));
    btAfterBrowse = new wxButton(this, BT_BROWSE_AFTER, _("..."));
    lbIds = new wxStaticText(this, -1, _("Identifiers "));
    txIds = new wxTextCtrl(this, -1, _("@id,@value"));
    lbIgnore = new wxStaticText(this, -1, _("Ignore Tags"));
    txIgnore = new wxTextCtrl(this, -1, _("@ignore-attr,ignore-tag"));
    cbBeforeValues = new wxCheckBox(this, -1, _("Add before values"));
    lbSep = new wxStaticText(this, -1, _("Separator "));
    txSep = new wxTextCtrl(this, -1, _("|"));
    cbTagChilds = new wxCheckBox(this, -1, _("Tag Childs"));
    btDiff = new wxButton(this, BT_DIFF, _("&Diff !"));
    btCancel = new wxButton(this, BT_CANCEL, _("&Cancel"));

    set_properties();
    do_layout();
	Fit();
    // end wxGlade
}


void xtnDialogDiffDual::set_properties()
{
    // begin wxGlade: xtnDialogDiffDual::set_properties
    SetTitle(_("Diff Two XML Files"));
    SetMinSize(wxSize(550, 325));
    txWith->SetToolTip(_("Diff the currently opened XML file with this file."));
    txWith->SetFocus();
    btBrowseFile->SetSize(wxSize(25, -1));
    btAfterBrowse->SetSize(wxSize(25, -1));
    txIds->SetToolTip(_("Use these items as identifiers. (List of items separated by comma, attributes must be prefixed by @, and '.' can be used for the text)"));
    txIgnore->SetToolTip(_("Differences on these items will be ignored"));
    cbBeforeValues->SetToolTip(_("If checked, when a difference occurs, the output file will contain \"before value <separator> after value\""));
    cbBeforeValues->SetValue(1);
    txSep->SetToolTip(_("Text to separate before and after values"));
    cbTagChilds->SetToolTip(_("Recursively tag childs of added or deleted nodes."));
    cbTagChilds->SetValue(1);
    // end wxGlade
}


void xtnDialogDiffDual::do_layout()
{
/*
    // begin wxGlade: xtnDialogDiffDual::do_layout
    wxBoxSizer* szMain = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szButtons = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* szOptions = new wxStaticBoxSizer(szOptions_staticbox, wxVERTICAL);
    wxBoxSizer* szSep = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szIgnore = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szIds = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szAfter = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szWith = new wxBoxSizer(wxHORIZONTAL);
    szMain->Add(lbTitle, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 4);
	szWith->AddSpacer(5);
    szWith->Add(lbWith, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 5);
	szWith->AddSpacer(5);
    szWith->Add(txWith, 1, wxALIGN_CENTER_VERTICAL, 0);
	szWith->AddSpacer(5);
    szWith->Add(btBrowseFile, 0, wxALIGN_CENTER_VERTICAL, 0);
    szMain->Add(szWith, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, 3);
	szAfter->AddSpacer(5);
    szAfter->Add(lbAfter, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 14);
	szAfter->AddSpacer(5);
    szAfter->Add(txAfter, 1, wxALIGN_CENTER_VERTICAL, 0);
	szAfter->AddSpacer(5);
    szAfter->Add(btAfterBrowse, 0, wxALIGN_CENTER_VERTICAL, 0);
    szMain->Add(szAfter, 0, wxALL|wxEXPAND, 3);
    szIds->Add(lbIds, 0, wxALIGN_CENTER_VERTICAL, 0);
	szIds->AddSpacer(5);
    szIds->Add(txIds, 1, wxALIGN_CENTER_VERTICAL, 0);
    szOptions->Add(szIds, 0, wxALL|wxEXPAND, 3);
    szIgnore->Add(lbIgnore, 0, wxALIGN_CENTER_VERTICAL, 0);
	szIgnore->AddSpacer(5);
    szIgnore->Add(txIgnore, 1, wxALIGN_CENTER_VERTICAL, 0);
    szOptions->Add(szIgnore, 0, wxALL|wxEXPAND, 3);
    szOptions->Add(cbBeforeValues, 0, wxALL, 3);
    szSep->Add(lbSep, 0, wxALIGN_CENTER_VERTICAL, 0);
	szSep->AddSpacer(5);
    szSep->Add(txSep, 1, wxALIGN_CENTER_VERTICAL, 0);
    szOptions->Add(szSep, 0, wxALL|wxEXPAND, 3);
	szOptions->AddSpacer(5);
    szOptions->Add(cbTagChilds, 0, wxALL, 3);
    szMain->Add(szOptions, 0, wxALL|wxEXPAND, 3);
    szButtons->Add(btDiff, 0, wxALIGN_CENTER_VERTICAL, 0);
	szButtons->AddSpacer(5);
    szButtons->Add(btCancel, 0, wxALIGN_CENTER_VERTICAL, 0);
	szMain->AddStretchSpacer();
    szMain->Add(szButtons, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 2);
	szMain->AddSpacer(5);
    SetAutoLayout(true);
    SetSizer(szMain);
    Layout();
    // end wxGlade
*/
	wxGridBagSizer * szMain = new wxGridBagSizer(5,5);
	wxBoxSizer* szButtons = new wxBoxSizer(wxHORIZONTAL);

	szMain->SetCols(3);
	szMain->SetRows(11);
	szMain->AddGrowableCol(1);

	szMain->Add(lbTitle, wxGBPosition(0,0),wxGBSpan(1,3), wxALL | wxALIGN_CENTER_HORIZONTAL, 4);

	szMain->Add(lbWith, wxGBPosition(1, 0), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL);
	szMain->Add(txWith, wxGBPosition(1, 1), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL | wxEXPAND);
	szMain->Add(btBrowseFile, wxGBPosition(1, 2), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL);

	szMain->Add(lbAfter, wxGBPosition(2, 0), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL);
	szMain->Add(txAfter, wxGBPosition(2, 1), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL | wxEXPAND);
	szMain->Add(btAfterBrowse, wxGBPosition(2, 2), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL);

	szMain->Add(lbIds, wxGBPosition(4, 0), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL);
	szMain->Add(txIds, wxGBPosition(4, 1), wxGBSpan(1, 2), wxALIGN_CENTER_VERTICAL | wxEXPAND);

	szMain->Add(lbIgnore, wxGBPosition(5, 0), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL);
	szMain->Add(txIgnore, wxGBPosition(5, 1), wxGBSpan(1, 2), wxALIGN_CENTER_VERTICAL | wxEXPAND);

	szMain->Add(cbBeforeValues, wxGBPosition(6, 0), wxGBSpan(1, 3), wxALIGN_CENTER_VERTICAL | wxEXPAND);

	szMain->Add(lbSep, wxGBPosition(7, 0), wxGBSpan(1, 1), wxALIGN_CENTER_VERTICAL);
	szMain->Add(txSep, wxGBPosition(7, 1), wxGBSpan(1, 2), wxALIGN_CENTER_VERTICAL | wxEXPAND);

	szMain->Add(cbTagChilds, wxGBPosition(8, 0), wxGBSpan(1, 3), wxALIGN_CENTER_VERTICAL | wxEXPAND);

	szMain->AddGrowableRow(9);

	szButtons->Add(btDiff, 0, wxALIGN_CENTER_VERTICAL, 0);
	szButtons->AddSpacer(5);
	szButtons->Add(btCancel, 0, wxALIGN_CENTER_VERTICAL, 0);
	szMain->Add(szButtons, wxGBPosition(10, 0), wxGBSpan(1, 3), wxALIGN_CENTER_VERTICAL | wxALIGN_CENTER_HORIZONTAL, 2);

	wxBoxSizer* szBorder = new wxBoxSizer(wxVERTICAL);
	szBorder->Add(szMain, 0, wxEXPAND | wxALL, 7);

	SetAutoLayout(true);
	SetSizer(szBorder);
	Layout();
}



// Event Map Table
BEGIN_EVENT_TABLE(xtnDialogDiffDual, wxDialog)
	EVT_BUTTON(xtnDialogDiffDual::BT_DIFF, xtnDialogDiffDual::OnDiff)
	EVT_BUTTON(xtnDialogDiffDual::BT_CANCEL, xtnDialogDiffDual::OnCancel)
	EVT_BUTTON(xtnDialogDiffDual::BT_BROWSE_WITH, xtnDialogDiffDual::OnBrowseWith)
	EVT_BUTTON(xtnDialogDiffDual::BT_BROWSE_AFTER, xtnDialogDiffDual::OnBrowseAfter)
END_EVENT_TABLE()

void xtnDialogDiffDual::OnCancel(wxCommandEvent &event)
{
	EndModal(wxID_CANCEL);
}

void xtnDialogDiffDual::OnBrowseWith(wxCommandEvent &event)
{
	wxString name;
	wxFileName fn;
	fn.Assign(txWith->GetValue());
	name = wxFileSelector(_("Open a file"), 
		fn.GetPath(wxPATH_GET_VOLUME|wxPATH_GET_SEPARATOR), 
		fn.GetName(),
		wxT(""), 
		XMLTREENAV_FILTERLIST_ALL,
		wxFD_OPEN | wxFD_FILE_MUST_EXIST);
    if (name != wxT(""))
    {
		txWith->SetValue(name);
    }
}

void xtnDialogDiffDual::OnBrowseAfter(wxCommandEvent &event)
{
	wxString name;
	wxFileName fn;
	fn.Assign(txAfter->GetValue());
	name = wxFileSelector(_("Open a file"), 
		fn.GetPath(wxPATH_GET_VOLUME|wxPATH_GET_SEPARATOR), 
		fn.GetName(),
		wxT(""), 
		XMLTREENAV_FILTERLIST_ALL,
		wxFD_OPEN | wxFD_FILE_MUST_EXIST);
    if (name != wxT(""))
    {
		txAfter->SetValue(name);
    }
}

void xtnDialogDiffDual::OnDiff(wxCommandEvent &event)
{
    if (!wxFileExists(this->getBeforeFile())) {
        wxMessageBox(wxString::Format(_("XML File Before '%s' does not exist"), this->getBeforeFile()), XTN_NAME, wxOK | wxICON_ERROR);
        return;
    }
    if (!wxFileExists(this->getAfterFile())) {
        wxMessageBox(wxString::Format(_("XML File After '%s' does not exist"), this->getAfterFile()), XTN_NAME, wxOK | wxICON_ERROR);
        return;
    } 
    EndModal(wxID_OK);
}

